inputPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
```
## Embedded Application
It's also possible to embed an entire Shiny application within an R Markdown document using the `shinyAppDir` function. This example embeds a Shiny application located in another directory:
```{r tabsets, echo=FALSE}
shinyAppDir(
system.file("examples/06_tabsets", package = "shiny"),
options = list(
width = "100%", height = 550
)
)
```
Note the use of the `height` parameter to determine how much vertical space the embedded application should occupy.
You can also use the `shinyApp` function to define an application inline rather then in an external directory.
In all of R code chunks above the `echo = FALSE` attribute is used. This is to prevent the R code within the chunk from rendering in the document alongside the Shiny components.
library("ISLR", lib.loc="~/Library/R/3.4/library")
names(Carseats )
lm.fit <- lm(Salesâˆ¼.+Income:Advertising+Price:Age, data=Carseats)
lm.fit <- lm(Sales~.+Income:Advertising+Price:Age, data=Carseats)
summary(lm.fit)
cont
?contrasts
attach(Carseats)
# Info on dummy variable
contrasts(Shelveloc)
attach(Carseats)
contrasts(Carseats$Shelveloc)
contrasts(Carseats$ShelveLoc)
contrasts(ShelveLoc)
test <- read.csv("./test.csv", header=TRUE)
train <- read.csv("./train.csv", header=TRUE)
# Adding an empty variable onto to the testing set
test.survived <- data.frame(Survived = rep("None", nrow(test)), test[,])
# Combine data sets
data.combined <- rbind(train, test.survived)
# Factor is a data type that structures it in categorize
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
str(data.combined)
table(data.combined$Survived)
table(data.combined$Pclass)
# Changing names from factors to strings
train$Name <- as.character(train$Name)
data.combined$Name <- as.character(data.combined$Name)
# Comparing the total names with unique names.
cat("Unique names: ", length(unique(data.combined$Name)),
"Total names: ", length(data.combined$Name))
# Storing the values that are duplicates
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
#table(data.combined[which(data.combined$Name %in% dup.names),])
```
# Storing the values that are duplicates
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "Name"])
#table(data.combined[which(data.combined$Name %in% dup.names),])
```
setwd("~/All_Projects/ds-education/OC_AZMachineLearning/06_ReinforcementLearning")
integer(0)
print(integer(0))
append(4,integer(0))
append(4,integer(1))
append(4,integer(2))
# Thomas Sampling
# Loading the dataset
df <- read.csv('archive/Ads_CTR_Optimisation.csv')
# Implementing Random Selection
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = df[n, ad]
total_reward = total_reward + reward
}
# Total Reward with the random selection is 1243 points
# Visualising the results of the Random Selection
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
#------------------------------------------------------------
# Thomas Sampling Implementation
#------------------------------------------------------------
N = 10000
d = 10
# Creating two vectors of size 0 that have begin at 0. As we go through the programming
number.of.rewards.1 <- integer(d)
number.of.rewards.2 <- integer(d)
ads.selected <- integer(0)
total.reward = 0
# Assumptions
# Ad i gets rewards y from Bernoulli Distribution
# Theta i is the total # the ad got rewarded 1 / the total # of times the ad was shown (uniform distribution)
for (n in 1:N){
max.random <- 0
ads <- 0
for (i in 1:d){
random.beta <- rbeta(n = 1,
shape1 = number.of.rewards.1 + 1,
shape2 = number.of.rewards.2 + 1)
# Storing the random draws if it is the largest prob (or the highest possiblity of return)
if (random.beta > max.random) {
max.random <- random.beta
ads = i # Tracking the index of the upper bound (whenever we find ourselves inside the if statement)
}
}
ads.selected <- append(ads.selected, ads)
reward <- df[n, ads] # Extracting whether or not the user will click on the ad (0 or 1)
# Checking if the value is what the user was likely to make him click on!
if (reward == 1) {
number.of.rewards.1[ads] <- number.of.rewards.1[ads] + 1
} else {
number.of.rewards.0[ads] <- number.of.rewards.0[ads] + 1
}
# Calculating the total reward
total.reward <- total.reward + reward
}
#------------------------------------------------------------
# Visualizing Thomas Sampling Implementation
#------------------------------------------------------------
hist(ads.selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Frequency')
# The fifth ad demonstrated the best results
# Thomas Sampling
# Loading the dataset
df <- read.csv('archive/Ads_CTR_Optimisation.csv')
# Implementing Random Selection
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = df[n, ad]
total_reward = total_reward + reward
}
# Total Reward with the random selection is 1243 points
# Visualising the results of the Random Selection
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
#------------------------------------------------------------
# Thomas Sampling Implementation
#------------------------------------------------------------
N = 10000
d = 10
# Creating two vectors of size 0 that have begin at 0. As we go through the programming
number.of.rewards.1 <- integer(d)
number.of.rewards.2 <- integer(d)
ads.selected <- integer(0)
total.reward = 0
# Assumptions
# Ad i gets rewards y from Bernoulli Distribution
# Theta i is the total # the ad got rewarded 1 / the total # of times the ad was shown (uniform distribution)
for (n in 1:N){
max.random <- 0
ads <- 0
for (i in 1:d){
random.beta <- rbeta(n = 1,
shape1 = number.of.rewards.1 + 1,
shape2 = number.of.rewards.2 + 1)
# Storing the random draws if it is the largest prob (or the highest possiblity of return)
if (random.beta > max.random) {
max.random <- random.beta
ads = i # Tracking the index of the upper bound (whenever we find ourselves inside the if statement)
}
}
ads.selected <- append(ads.selected, ads)
reward <- df[n, ads] # Extracting whether or not the user will click on the ad (0 or 1)
# Checking if the value is what the user was likely to make him click on!
if (reward == 1) {
number.of.rewards.1[ads] <- number.of.rewards.1[ads] + 1
} else {
number.of.rewards.2[ads] <- number.of.rewards.2[ads] + 1
}
# Calculating the total reward
total.reward <- total.reward + reward
}
#------------------------------------------------------------
# Visualizing Thomas Sampling Implementation
#------------------------------------------------------------
hist(ads.selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Frequency')
# The fifth ad demonstrated the best results
# Creating two vectors of size 0 that have begin at 0. As we go through the programming
number.of.rewards.1 <- integer(d)
number.of.rewards.2 <- integer(d)
ads.selected <- integer(0)
total.reward = 0
# Assumptions
# Ad i gets rewards y from Bernoulli Distribution
# Theta i is the total # the ad got rewarded 1 / the total # of times the ad was shown (uniform distribution)
for (n in 1:N){
max.random <- 0
ads <- 0
for (i in 1:d){
random.beta <- rbeta(n = 1,
shape1 = number.of.rewards.1 + 1,
shape2 = number.of.rewards.2 + 1)
# Storing the random draws if it is the largest prob (or the highest possiblity of return)
if (random.beta > max.random) {
max.random <- random.beta
ads = i # Tracking the index of the upper bound (whenever we find ourselves inside the if statement)
}
}
ads.selected <- append(ads.selected, ads)
reward <- df[n, ads] # Extracting whether or not the user will click on the ad (0 or 1)
# Checking if the value is what the user was likely to make him click on!
if (reward == 1) {
number.of.rewards.1[ads] <- number.of.rewards.1[ads] + 1
} else {
number.of.rewards.2[ads] <- number.of.rewards.2[ads] + 1
}
# Calculating the total reward
total.reward <- total.reward + reward
}
hist(ads.selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Frequency')
#
total.reward
N = 10000
d = 10
# Creating two vectors of size 0 that have begin at 0. As we go through the programming
number.of.rewards.1 <- integer(d)
number.of.rewards.2 <- integer(d)
ads.selected <- integer(0)
total.reward = 0
# Assumptions
# Ad i gets rewards y from Bernoulli Distribution
# Theta i is the total # the ad got rewarded 1 / the total # of times the ad was shown (uniform distribution)
for (n in 1:N){
max.random <- 0
ads <- 0
for (i in 1:d){
random.beta <- rbeta(n = 1,
shape1 = number.of.rewards.1 + 1,
shape2 = number.of.rewards.2 + 1)
# Storing the random draws if it is the largest prob (or the highest possiblity of return)
if (random.beta > max.random) {
max.random <- random.beta
ads = i # Tracking the index of the upper bound (whenever we find ourselves inside the if statement)
}
}
ads.selected <- append(ads.selected, ads)
reward <- df[n, ads] # Extracting whether or not the user will click on the ad (0 or 1)
# Checking if the value is what the user was likely to make him click on!
if (reward == 1) {
number.of.rewards.1[ads] <- number.of.rewards.1[ads] + 1
} else {
number.of.rewards.2[ads] <- number.of.rewards.2[ads] + 1
}
# Calculating the total reward
total.reward <- total.reward + reward
}
#------------------------------------------------------------
# Visualizing Thomas Sampling Implementation
#------------------------------------------------------------
hist(ads.selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Frequency')
# The fifth ad demonstrated the best results
total.reward
df <- read.csv('archive/Ads_CTR_Optimisation.csv')
N = 10000
d = 10
# Creating two vectors of size 0 that have begin at 0. As we go through the programming
number.of.rewards.1 <- integer(d)
number.of.rewards.2 <- integer(d)
ads.selected <- integer(0)
total.reward = 0
# Assumptions
# Ad i gets rewards y from Bernoulli Distribution
# Theta i is the total # the ad got rewarded 1 / the total # of times the ad was shown (uniform distribution)
for (n in 1:N){
max.random <- 0
ads <- 0
for (i in 1:d){
random.beta <- rbeta(n = 1,
shape1 = number.of.rewards.1 + 1,
shape2 = number.of.rewards.2 + 1)
# Storing the random draws if it is the largest prob (or the highest possiblity of return)
if (random.beta > max.random) {
max.random <- random.beta
ads = i # Tracking the index of the upper bound (whenever we find ourselves inside the if statement)
}
}
ads.selected <- append(ads.selected, ads)
reward <- df[n, ads] # Extracting whether or not the user will click on the ad (0 or 1)
# Checking if the value is what the user was likely to make him click on!
if (reward == 1) {
number.of.rewards.1[ads] <- number.of.rewards.1[ads] + 1
} else {
number.of.rewards.2[ads] <- number.of.rewards.2[ads] + 1
}
# Calculating the total reward
total.reward <- total.reward + reward
}
#------------------------------------------------------------
# Visualizing Thomas Sampling Implementation
#------------------------------------------------------------
hist(ads.selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Frequency')
# The fifth ad demonstrated the best results
total.reward
clear
N = 10000
d = 10
# Creating two vectors of size 0 that have begin at 0. As we go through the programming
number.of.rewards.1 <- integer(d)
number.of.rewards.2 <- integer(d)
ads.selected <- integer(0)
total.reward = 0
# Assumptions
# Ad i gets rewards y from Bernoulli Distribution
# Theta i is the total # the ad got rewarded 1 / the total # of times the ad was shown (uniform distribution)
for (n in 1:N){
max.random <- 0
ads <- 0
for (i in 1:d){
random.beta <- rbeta(n = 1,
shape1 = number.of.rewards.1 + 1,
shape2 = number.of.rewards.2 + 1)
# Storing the random draws if it is the largest prob (or the highest possiblity of return)
if (random.beta > max.random) {
max.random <- random.beta
ads = i # Tracking the index of the upper bound (whenever we find ourselves inside the if statement)
}
}
ads.selected <- append(ads.selected, ads)
reward <- df[n, ads] # Extracting whether or not the user will click on the ad (0 or 1)
# Checking if the value is what the user was likely to make him click on!
if (reward == 1) {
number.of.rewards.1[ads] <- number.of.rewards.1[ads] + 1
} else {
number.of.rewards.2[ads] <- number.of.rewards.2[ads] + 1
}
# Calculating the total reward
total.reward <- total.reward + reward
}
#------------------------------------------------------------
# Visualizing Thomas Sampling Implementation
#------------------------------------------------------------
hist(ads.selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Frequency')
# The fifth ad demonstrated the best results
# UCB
# Loading the dataset
df <- read.csv('archive/Ads_CTR_Optimisation.csv')
# Implementing Random Selection
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = df[n, ad]
total_reward = total_reward + reward
}
# Total Reward with the random selection is 1243 points
# Visualising the results of the Random Selection
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
#------------------------------------------------------------
# UCB Implementation
#------------------------------------------------------------
N = 10000
d = 10
# We are creating two vectors of size 0 that have begin at 0. As we go through the programming
# we will begin to see the most effective selectors
numbers.selections <- integer(d)
sums.rewards <- integer(d)
ads.selected <- integer(0)
total.reward = 0
for (n in 1:N){
max.upper.bounds <- 0
ads <- 0
for (i in 1:d){
if (numbers.selections[i] > 0) {
# For the first 10 cases, this would be false because none of them have been selected
average.rewards <- sums.rewards[i] / numbers.selections[i]
delta.i <- sqrt(3/2 * log(n) / numbers.selections[i])
upper.bound <- average.rewards + delta.i
}
else {
# We are using a large number because this can provide each init each ad to be chosen at least once!
upper.bound <- 1e400
}
if (upper.bound > max.upper.bounds) {
max.upper.bounds <- upper.bound
ads = i # Tracking the index of the upper bound (whenever we find ourselves inside the if statement)
}
}
ads.selected <- append(ads.selected, ads)
numbers.selections[ads] <- numbers.selections[ads] + 1
reward <- df[n, ads] # Extracting whether or not the user will click on the ad (0 or 1)
sums.rewards[ads] <- sums.rewards[ads] + reward # Adding the reward for this given round to the previous rounds
# Calculating the total reward
total.reward <- total.reward + reward
}
#------------------------------------------------------------
# Visualizing UCB Implementation
#------------------------------------------------------------
hist(ads.selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Frequency')
# The fifth ad demonstrated the best results
# Thomas Sampling
# Loading the dataset
df <- read.csv('archive/Ads_CTR_Optimisation.csv')
# Implementing Random Selection
N = 10000
d = 10
ads_selected = integer(0)
total_reward = 0
for (n in 1:N) {
ad = sample(1:10, 1)
ads_selected = append(ads_selected, ad)
reward = df[n, ad]
total_reward = total_reward + reward
}
# Total Reward with the random selection is 1243 points
# Visualising the results of the Random Selection
hist(ads_selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Number of times each ad was selected')
#------------------------------------------------------------
# Thomas Sampling Implementation
#------------------------------------------------------------
N = 10000
d = 10
# Creating two vectors of size 0 that have begin at 0. As we go through the programming
number.of.rewards.1 <- integer(d)
number.of.rewards.2 <- integer(d)
ads.selected <- integer(0)
total.reward = 0
# Assumptions
# Ad i gets rewards y from Bernoulli Distribution
# Theta i is the total # the ad got rewarded 1 / the total # of times the ad was shown (uniform distribution)
for (n in 1:N){
max.random <- 0
ads <- 0
for (i in 1:d){
random.beta <- rbeta(n = 1,
shape1 = number.of.rewards.1[i] + 1,
shape2 = number.of.rewards.2[i] + 1)
# Storing the random draws if it is the largest prob (or the highest possiblity of return)
if (random.beta > max.random) {
max.random <- random.beta
ads = i # Tracking the index of the upper bound (whenever we find ourselves inside the if statement)
}
}
ads.selected <- append(ads.selected, ads)
reward <- df[n, ads] # Extracting whether or not the user will click on the ad (0 or 1)
# Checking if the value is what the user was likely to make him click on!
if (reward == 1) {
number.of.rewards.1[ads] <- number.of.rewards.1[ads] + 1
} else {
number.of.rewards.2[ads] <- number.of.rewards.2[ads] + 1
}
# Calculating the total reward
total.reward <- total.reward + reward
}
#------------------------------------------------------------
# Visualizing Thomas Sampling Implementation
#------------------------------------------------------------
hist(ads.selected,
col = 'blue',
main = 'Histogram of ads selections',
xlab = 'Ads',
ylab = 'Frequency')
# The fifth ad demonstrated the best results
